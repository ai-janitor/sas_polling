# Tox configuration for testing across multiple Python versions and environments
[tox]
# Minimum tox version
minversion = 4.0

# Python versions to test
envlist = 
    py39
    py310
    py311
    py312
    coverage
    lint
    security
    docs
    performance

# Skip missing interpreters
skip_missing_interpreters = true

[testenv]
# Base test environment configuration
deps = 
    -r{toxinidir}/requirements-test.txt

# Test commands
commands = 
    pytest {posargs} -v --tb=short

# Environment variables
setenv =
    PYTHONPATH = {toxinidir}
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
    PYTHONDONTWRITEBYTECODE = 1

# Change directory to run tests from project root
changedir = {toxinidir}

# Parallelize test runs
parallel_show_output = true

# Use develop mode for faster testing
usedevelop = true

[testenv:py39]
# Python 3.9 specific testing
basepython = python3.9
deps = 
    {[testenv]deps}
commands = 
    pytest tests/ -v --cov=src --cov-report=term-missing

[testenv:py310]
# Python 3.10 specific testing
basepython = python3.10
deps = 
    {[testenv]deps}
commands = 
    pytest tests/ -v --cov=src --cov-report=term-missing

[testenv:py311]
# Python 3.11 specific testing (primary development version)
basepython = python3.11
deps = 
    {[testenv]deps}
commands = 
    pytest tests/ -v --cov=src --cov-report=term-missing --cov-report=html

[testenv:py312]
# Python 3.12 specific testing
basepython = python3.12
deps = 
    {[testenv]deps}
commands = 
    pytest tests/ -v --cov=src --cov-report=term-missing

[testenv:coverage]
# Combined coverage reporting
basepython = python3.11
deps = 
    {[testenv]deps}
    coverage[toml]
commands = 
    coverage erase
    pytest tests/ --cov=src --cov-append --cov-report=
    coverage combine
    coverage report --show-missing --fail-under=80
    coverage html
    coverage xml

setenv =
    {[testenv]setenv}
    COVERAGE_FILE = {toxworkdir}/.coverage

[testenv:unit]
# Unit tests only
basepython = python3.11
deps = {[testenv]deps}
commands = 
    pytest tests/ -m "unit and not slow" -v --cov=src --cov-report=term-missing

[testenv:integration]
# Integration tests only
basepython = python3.11
deps = {[testenv]deps}
commands = 
    pytest tests/ -m "integration" -v --cov=src --cov-report=term-missing

[testenv:performance]
# Performance tests
basepython = python3.11
deps = 
    {[testenv]deps}
    pytest-benchmark
commands = 
    pytest tests/ -m "performance" -v --benchmark-only --benchmark-sort=mean

[testenv:lint]
# Code quality and linting
basepython = python3.11
deps = 
    flake8>=6.0.0
    black>=23.7.0
    isort>=5.12.0
    mypy>=1.5.1
    bandit>=1.7.5

commands = 
    # Check import sorting
    isort --check-only --diff src/ tests/
    
    # Check code formatting
    black --check --diff src/ tests/
    
    # Run linting
    flake8 src/ tests/
    
    # Type checking
    mypy src/ --ignore-missing-imports
    
    # Security linting
    bandit -r src/ -f json -o bandit-report.json

skip_install = false

[testenv:security]
# Security vulnerability scanning
basepython = python3.11
deps = 
    safety>=2.3.5
    bandit>=1.7.5
    pip-audit>=2.6.1

commands = 
    # Check for known security vulnerabilities
    safety check --json --output safety-report.json
    
    # Security linting
    bandit -r src/ -f json -o bandit-security.json
    
    # Audit pip packages
    pip-audit --format=json --output=pip-audit.json

[testenv:docs]
# Documentation building and testing
basepython = python3.11
deps = 
    sphinx>=7.1.2
    sphinx-rtd-theme>=1.3.0
    myst-parser>=2.0.0

commands = 
    sphinx-build -W -b html docs docs/_build/html
    sphinx-build -W -b doctest docs docs/_build/doctest

changedir = {toxinidir}

[testenv:format]
# Code formatting
basepython = python3.11
deps = 
    black>=23.7.0
    isort>=5.12.0

commands = 
    isort src/ tests/
    black src/ tests/

[testenv:clean]
# Clean up generated files
basepython = python3.11
deps = 
skip_install = true
commands = 
    python -c "import shutil; shutil.rmtree('htmlcov', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.pytest_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('docs/_build', ignore_errors=True)"
    python -c "import os; [os.remove(f) for f in ['.coverage', 'coverage.xml', 'coverage.json'] if os.path.exists(f)]"

[testenv:dev]
# Development environment with all tools
basepython = python3.11
deps = 
    {[testenv]deps}
    ipdb>=0.13.13
    rich>=13.5.2
    pre-commit>=3.3.3

commands = 
    python -c "print('Development environment ready!')"
    python -c "print('Run tests with: pytest')"
    python -c "print('Run coverage with: pytest --cov=src')"

# Global pytest configuration
[pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
markers = 
    unit: Unit tests
    integration: Integration tests
    performance: Performance tests
    slow: Slow running tests

# Flake8 configuration
[flake8]
max-line-length = 88
extend-ignore = 
    # E203: whitespace before ':'
    E203,
    # W503: line break before binary operator
    W503,
    # E501: line too long (handled by black)
    E501

exclude = 
    .git,
    __pycache__,
    .pytest_cache,
    .tox,
    venv,
    env,
    .venv,
    dist,
    build,
    migrations

per-file-ignores = 
    # Tests can have longer lines and unused imports
    tests/*:E501,F401,F811
    # Init files can have unused imports
    __init__.py:F401

# Black configuration
[tool:black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool:isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[mypy]
python_version = 3.11
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[mypy-tests.*]
disallow_untyped_defs = false

# Bandit configuration
[bandit]
exclude_dirs = tests,docs
skips = B101,B601