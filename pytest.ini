[tool:pytest]
# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Minimum version requirement
minversion = 6.0

# Add options
addopts = 
    -ra
    --strict-markers
    --strict-config
    --disable-warnings
    --tb=short
    --maxfail=10
    --durations=10

# Test markers
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (slower, multiple components)
    performance: Performance and load tests
    slow: Slow running tests
    security: Security-related tests
    regression: Regression tests
    smoke: Smoke tests for basic functionality
    api: API endpoint tests
    database: Database-related tests
    external: Tests requiring external services
    mock: Tests using mocks/stubs

# Filter warnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    error::RuntimeWarning

# Coverage options (when using pytest-cov)
# These will be overridden by .coveragerc if present
# --cov=src
# --cov-report=html
# --cov-report=term-missing
# --cov-fail-under=80

# Logging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Timeout for tests (in seconds)
timeout = 300

# Parallel execution settings
# These require pytest-xdist plugin
# -n auto  # Use all available CPUs
# --dist worksteal  # Dynamic work distribution

# Test data directory
# Use this for test data files
testdatadir = tests/data

# Custom options for different test types
# Run with: pytest -m "unit and not slow"
#          pytest -m "integration"
#          pytest -m "performance"